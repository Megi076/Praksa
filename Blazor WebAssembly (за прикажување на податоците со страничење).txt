Чекор 2: Креирање на Blazor WebAssembly
Ова е клиентската апликација што ќе ги прикажува податоците.

2.1 Креирај нов Blazor WebAssembly проект
Отвори Visual Studio

Избери Create a new project

Барај Blazor WebAssembly App

Кликни Next

Дади име, на пример: TaxiServiceBlazor

Избери .NET 8.0

Важно: Одбери "ASP.NET Core Hosted"

Кликни Create

2.2 Додај HttpClient во Program.cs
Во Program.cs, додај ја оваа линија:
builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri("https://localhost:5001/") });

2.3 Креирај сервис за податоци
Во Services/TaxiRideService.cs:
using System.Net.Http.Json;

public class TaxiRideService
{
    private readonly HttpClient _httpClient;

    public TaxiRideService(HttpClient httpClient)
    {
        _httpClient = httpClient;
    }

    public async Task<(List<TaxiRide> Rides, int TotalRecords)> GetPagedTaxiRides(int page, int pageSize)
    {
        var result = await _httpClient.GetFromJsonAsync<PagedResult>($"api/TaxiRides/{page}/{pageSize}");
        return (result.Rides, result.TotalRecords);
    }
}

public class PagedResult
{
    public List<TaxiRide> Rides { get; set; } = new();
    public int TotalRecords { get; set; }
}

Во Program.cs, регистрирај го сервисот: 
builder.Services.AddScoped<TaxiRideService>();

2.4 Додај UI во Pages/TaxiRides.razor
@page "/taxirides"
@inject TaxiRideService TaxiRideService

<h3>Taxi Rides</h3>

@if (rides == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Driver</th>
                <th>Destination</th>
                <th>Price</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ride in rides)
            {
                <tr>
                    <td>@ride.DriverName</td>
                    <td>@ride.Destination</td>
                    <td>@ride.Price</td>
                    <td>@ride.RideDate.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="PrevPage" disabled="@(page == 1)">Previous</button>
    <span> Page @page of @totalPages </span>
    <button @onclick="NextPage" disabled="@(page >= totalPages)">Next</button>
}

@code {
    private List<TaxiRide> rides;
    private int page = 1;
    private int pageSize = 5;
    private int totalPages;

    protected override async Task OnInitializedAsync() => await LoadData();

    private async Task LoadData()
    {
        var result = await TaxiRideService.GetPagedTaxiRides(page, pageSize);
        rides = result.Rides;
        totalPages = (int)Math.Ceiling((double)result.TotalRecords / pageSize);
    }

    private async Task PrevPage() { if (page > 1) { page--; await LoadData(); } }
    private async Task NextPage() { if (page < totalPages) { page++; await LoadData(); } }
}








